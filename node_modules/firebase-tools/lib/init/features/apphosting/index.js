"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onboardRollout = exports.createBackend = exports.onboardBackend = exports.doSetup = void 0;
const clc = require("colorette");
const repo = require("./repo");
const poller = require("../../../operation-poller");
const apphosting = require("../../../gcp/apphosting");
const utils_1 = require("../../../utils");
const api_1 = require("../../../api");
const apphosting_1 = require("../../../gcp/apphosting");
const error_1 = require("../../../error");
const prompt_1 = require("../../../prompt");
const constants_1 = require("./constants");
const ensureApiEnabled_1 = require("../../../ensureApiEnabled");
const apphostingPollerOptions = {
    apiOrigin: api_1.apphostingOrigin,
    apiVersion: apphosting_1.API_VERSION,
    masterTimeout: 25 * 60 * 1000,
    maxBackoff: 10000,
};
async function doSetup(setup, projectId) {
    await Promise.all([
        (0, ensureApiEnabled_1.ensure)(projectId, "cloudbuild.googleapis.com", "apphosting", true),
        (0, ensureApiEnabled_1.ensure)(projectId, "secretmanager.googleapis.com", "apphosting", true),
        (0, ensureApiEnabled_1.ensure)(projectId, "run.googleapis.com", "apphosting", true),
        (0, ensureApiEnabled_1.ensure)(projectId, "artifactregistry.googleapis.com", "apphosting", true),
    ]);
    const allowedLocations = (await apphosting.listLocations(projectId)).map((loc) => loc.locationId);
    if (setup.location) {
        if (!allowedLocations.includes(setup.location)) {
            throw new error_1.FirebaseError(`Invalid location ${setup.location}. Valid choices are ${allowedLocations.join(", ")}`);
        }
    }
    (0, utils_1.logBullet)("First we need a few details to create your backend.");
    const location = setup.location || (await promptLocation(projectId, allowedLocations));
    (0, utils_1.logSuccess)(`Region set to ${location}.\n`);
    let backendId;
    while (true) {
        backendId = await (0, prompt_1.promptOnce)({
            name: "backendId",
            type: "input",
            default: "my-web-app",
            message: "Create a name for your backend [1-30 characters]",
        });
        try {
            await apphosting.getBackend(projectId, location, backendId);
        }
        catch (err) {
            if (err.status === 404) {
                break;
            }
            throw new error_1.FirebaseError(`Failed to check if backend with id ${backendId} already exists in ${location}`, { original: err });
        }
        (0, utils_1.logWarning)(`Backend with id ${backendId} already exists in ${location}`);
    }
    const backend = await onboardBackend(projectId, location, backendId);
    const confirmRollout = await (0, prompt_1.promptOnce)({
        type: "confirm",
        name: "rollout",
        default: true,
        message: "Do you want to deploy now?",
    });
    if (!confirmRollout) {
        (0, utils_1.logSuccess)(`Successfully created backend:\n\t${backend.name}`);
        (0, utils_1.logSuccess)(`Your site will be deployed at:\n\thttps://${backend.uri}`);
        return;
    }
    const branch = await (0, prompt_1.promptOnce)({
        name: "branch",
        type: "input",
        default: "main",
        message: "Which branch do you want to deploy?",
    });
    const { build } = await onboardRollout(projectId, location, backendId, {
        source: {
            codebase: {
                branch,
            },
        },
    });
    if (build.state !== "READY") {
        throw new error_1.FirebaseError(`Failed to build your app. Please inspect the build logs at ${build.buildLogsUri}.`, { children: [build.error] });
    }
    (0, utils_1.logSuccess)(`Successfully created backend:\n\t${backend.name}`);
    (0, utils_1.logSuccess)(`Your site is now deployed at:\n\thttps://${backend.uri}`);
    (0, utils_1.logSuccess)(`View the rollout status by running:\n\tfirebase apphosting:backends:get ${backendId} --project ${projectId}`);
}
exports.doSetup = doSetup;
async function promptLocation(projectId, locations) {
    return (await (0, prompt_1.promptOnce)({
        name: "region",
        type: "list",
        default: constants_1.DEFAULT_REGION,
        message: "Please select a region " +
            `(${clc.yellow("info")}: Your region determines where your backend is located):\n`,
        choices: locations.map((loc) => ({ value: loc })),
    }));
}
function toBackend(cloudBuildConnRepo) {
    return {
        servingLocality: "GLOBAL_ACCESS",
        codebase: {
            repository: `${cloudBuildConnRepo.name}`,
            rootDirectory: "/",
        },
        labels: {},
    };
}
async function onboardBackend(projectId, location, backendId) {
    const cloudBuildConnRepo = await repo.linkGitHubRepository(projectId, location);
    const backendDetails = toBackend(cloudBuildConnRepo);
    return await createBackend(projectId, location, backendDetails, backendId);
}
exports.onboardBackend = onboardBackend;
async function createBackend(projectId, location, backendReqBoby, backendId) {
    const op = await apphosting.createBackend(projectId, location, backendReqBoby, backendId);
    const backend = await poller.pollOperation(Object.assign(Object.assign({}, apphostingPollerOptions), { pollerName: `create-${projectId}-${location}-${backendId}`, operationResourceName: op.name }));
    return backend;
}
exports.createBackend = createBackend;
async function onboardRollout(projectId, location, backendId, buildInput) {
    (0, utils_1.logBullet)("Starting a new rollout... this may take a few minutes.");
    const buildId = (0, utils_1.generateId)();
    const buildOp = await apphosting.createBuild(projectId, location, backendId, buildId, buildInput);
    const rolloutId = (0, utils_1.generateId)();
    const rolloutOp = await apphosting.createRollout(projectId, location, backendId, rolloutId, {
        build: `projects/${projectId}/locations/${location}/backends/${backendId}/builds/${buildId}`,
    });
    const rolloutPoll = poller.pollOperation(Object.assign(Object.assign({}, apphostingPollerOptions), { pollerName: `create-${projectId}-${location}-backend-${backendId}-rollout-${rolloutId}`, operationResourceName: rolloutOp.name }));
    const buildPoll = poller.pollOperation(Object.assign(Object.assign({}, apphostingPollerOptions), { pollerName: `create-${projectId}-${location}-backend-${backendId}-build-${buildId}`, operationResourceName: buildOp.name }));
    const [rollout, build] = await Promise.all([rolloutPoll, buildPoll]);
    (0, utils_1.logSuccess)("Rollout completed.");
    return { rollout, build };
}
exports.onboardRollout = onboardRollout;
