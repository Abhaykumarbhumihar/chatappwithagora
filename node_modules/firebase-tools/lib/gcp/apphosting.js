"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureApiEnabled = exports.listLocations = exports.updateTraffic = exports.listRollouts = exports.createRollout = exports.createBuild = exports.getBuild = exports.deleteBackend = exports.listBackends = exports.getBackend = exports.createBackend = exports.API_VERSION = exports.API_HOST = void 0;
const proto = require("../gcp/proto");
const apiv2_1 = require("../apiv2");
const projectUtils_1 = require("../projectUtils");
const api_1 = require("../api");
const ensureApiEnabled_1 = require("../ensureApiEnabled");
exports.API_HOST = new URL(api_1.apphostingOrigin).host;
exports.API_VERSION = "v1alpha";
const client = new apiv2_1.Client({
    urlPrefix: api_1.apphostingOrigin,
    auth: true,
    apiVersion: exports.API_VERSION,
});
async function createBackend(projectId, location, backendReqBoby, backendId) {
    const res = await client.post(`projects/${projectId}/locations/${location}/backends`, backendReqBoby, { queryParams: { backendId } });
    return res.body;
}
exports.createBackend = createBackend;
async function getBackend(projectId, location, backendId) {
    const name = `projects/${projectId}/locations/${location}/backends/${backendId}`;
    const res = await client.get(name);
    return res.body;
}
exports.getBackend = getBackend;
async function listBackends(projectId, location) {
    const name = `projects/${projectId}/locations/${location}/backends`;
    const res = await client.get(name);
    return res.body;
}
exports.listBackends = listBackends;
async function deleteBackend(projectId, location, backendId) {
    const name = `projects/${projectId}/locations/${location}/backends/${backendId}`;
    const res = await client.delete(name);
    return res.body;
}
exports.deleteBackend = deleteBackend;
async function getBuild(projectId, location, backendId, buildId) {
    const name = `projects/${projectId}/locations/${location}/backends/${backendId}/builds/${buildId}`;
    const res = await client.get(name);
    return res.body;
}
exports.getBuild = getBuild;
async function createBuild(projectId, location, backendId, buildId, buildInput) {
    const res = await client.post(`projects/${projectId}/locations/${location}/backends/${backendId}/builds`, buildInput, { queryParams: { buildId } });
    return res.body;
}
exports.createBuild = createBuild;
async function createRollout(projectId, location, backendId, rolloutId, rollout) {
    const res = await client.post(`projects/${projectId}/locations/${location}/backends/${backendId}/rollouts`, rollout, { queryParams: { rolloutId } });
    return res.body;
}
exports.createRollout = createRollout;
async function listRollouts(projectId, location, backendId) {
    const res = await client.get(`projects/${projectId}/locations/${location}/backends/${backendId}/rollouts`);
    return res.body.rollouts;
}
exports.listRollouts = listRollouts;
async function updateTraffic(projectId, location, backendId, traffic) {
    const fieldMasks = proto.fieldMasks(traffic);
    const queryParams = {
        updateMask: fieldMasks.join(","),
    };
    const name = `projects/${projectId}/locations/${location}/backends/${backendId}/traffic`;
    const res = await client.patch(name, Object.assign(Object.assign({}, traffic), { name }), {
        queryParams,
    });
    return res.body;
}
exports.updateTraffic = updateTraffic;
async function listLocations(projectId) {
    let pageToken;
    let locations = [];
    do {
        const response = await client.get(`projects/${projectId}/locations`);
        if (response.body.locations && response.body.locations.length > 0) {
            locations = locations.concat(response.body.locations);
        }
        pageToken = response.body.nextPageToken;
    } while (pageToken);
    return locations;
}
exports.listLocations = listLocations;
async function ensureApiEnabled(options) {
    const projectId = (0, projectUtils_1.needProjectId)(options);
    return await (0, ensureApiEnabled_1.ensure)(projectId, exports.API_HOST, "frameworks", true);
}
exports.ensureApiEnabled = ensureApiEnabled;
