"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = void 0;
const command_1 = require("../command");
const projectUtils_1 = require("../projectUtils");
const error_1 = require("../error");
const prompt_1 = require("../prompt");
const logger_1 = require("../logger");
const constants_1 = require("../init/features/apphosting/constants");
const utils = require("../utils");
const apphosting = require("../gcp/apphosting");
const Table = require("cli-table");
const COLUMN_LENGTH = 20;
const TABLE_HEAD = [
    "Backend Id",
    "Repository Name",
    "Location",
    "URL",
    "Created Date",
    "Updated Date",
];
exports.command = new command_1.Command("apphosting:backends:delete")
    .description("Delete a backend from a Firebase project")
    .option("-l, --location <location>", "App Backend location", "")
    .option("-s, --backend <backend>", "Backend Id", "")
    .withForce()
    .before(apphosting.ensureApiEnabled)
    .action(async (options) => {
    const projectId = (0, projectUtils_1.needProjectId)(options);
    let location = options.location;
    const backendId = options.backend;
    if (!backendId) {
        throw new error_1.FirebaseError("Backend id can't be empty.");
    }
    if (!location) {
        const allowedLocations = (await apphosting.listLocations(projectId)).map((loc) => loc.locationId);
        location = await (0, prompt_1.promptOnce)({
            name: "region",
            type: "list",
            default: constants_1.DEFAULT_REGION,
            message: "Please select the region of the backend you'd like to delete:",
            choices: allowedLocations,
        });
    }
    const table = new Table({
        head: TABLE_HEAD,
        style: { head: ["green"] },
    });
    table.colWidths = COLUMN_LENGTH;
    let backend;
    try {
        backend = await apphosting.getBackend(projectId, location, backendId);
        populateTable(backend, table);
    }
    catch (err) {
        throw new error_1.FirebaseError(`No backends found with given parameters. Command aborted.`, {
            original: err,
        });
    }
    utils.logWarning("You are about to permanently delete the backend:");
    logger_1.logger.info(table.toString());
    const confirmDeletion = await (0, prompt_1.promptOnce)({
        type: "confirm",
        name: "force",
        default: false,
        message: "Are you sure?",
    }, options);
    if (!confirmDeletion) {
        throw new error_1.FirebaseError("Deletion Aborted");
    }
    try {
        await apphosting.deleteBackend(projectId, location, backendId);
        utils.logSuccess(`Successfully deleted the backend: ${backendId}`);
    }
    catch (err) {
        throw new error_1.FirebaseError(`Failed to delete backend: ${backendId}. Please check the parameters you have provided.`, { original: err });
    }
    return backend;
});
function populateTable(backend, table) {
    var _a;
    const [location, , backendId] = backend.name.split("/").slice(3, 6);
    const entry = [
        backendId,
        (_a = backend.codebase.repository) === null || _a === void 0 ? void 0 : _a.split("/").pop(),
        location,
        backend.uri,
        backend.createTime,
        backend.updateTime,
    ];
    const newRow = entry.map((name) => {
        const maxCellWidth = COLUMN_LENGTH - 2;
        const chunks = [];
        for (let i = 0; name && i < name.length; i += maxCellWidth) {
            chunks.push(name.substring(i, i + maxCellWidth));
        }
        return chunks.join("\n");
    });
    table.push(newRow);
}
