"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = void 0;
const command_1 = require("../command");
const projectUtils_1 = require("../projectUtils");
const error_1 = require("../error");
const logger_1 = require("../logger");
const apphosting = require("../gcp/apphosting");
const Table = require("cli-table");
const COLUMN_LENGTH = 20;
const TABLE_HEAD = ["Backend Id", "Repository", "Location", "URL", "Created Date", "Updated Date"];
exports.command = new command_1.Command("apphosting:backends:list")
    .description("List backends of a Firebase project.")
    .option("-l, --location <location>", "App Backend location", "-")
    .before(apphosting.ensureApiEnabled)
    .action(async (options) => {
    const projectId = (0, projectUtils_1.needProjectId)(options);
    const location = options.location;
    const table = new Table({
        head: TABLE_HEAD,
        style: { head: ["green"] },
    });
    table.colWidths = COLUMN_LENGTH;
    const backendsList = [];
    try {
        const backendsPerRegion = await apphosting.listBackends(projectId, location);
        backendsList.push(...(backendsPerRegion.backends || []));
        populateTable(backendsList, table);
        logger_1.logger.info(table.toString());
    }
    catch (err) {
        throw new error_1.FirebaseError(`Unable to list backends present for project: ${projectId}. Please check the parameters you have provided.`, { original: err });
    }
    return backendsList;
});
function populateTable(backends, table) {
    var _a;
    for (const backend of backends) {
        const [location, , backendId] = backend.name.split("/").slice(3, 6);
        const entry = [
            backendId,
            (_a = backend.codebase.repository) === null || _a === void 0 ? void 0 : _a.split("/").pop(),
            location,
            backend.uri,
            backend.createTime,
            backend.updateTime,
        ];
        const newRow = entry.map((name) => {
            const maxCellWidth = COLUMN_LENGTH - 2;
            const chunks = [];
            for (let i = 0; name && i < name.length; i += maxCellWidth) {
                chunks.push(name.substring(i, i + maxCellWidth));
            }
            return chunks.join("\n");
        });
        table.push(newRow);
    }
}
